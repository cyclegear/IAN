/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package form_port_app;

/**
 *
 * @author WStevens
 */
import java.awt.Component;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.*;
import java.text.*;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import net.proteanit.sql.DbUtils;

// this class creates JTable with database data for the store user to view and print the data.
public class Reports extends javax.swing.JFrame {

    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pst = null;
    public static FileWriter fileWriter;
    public static BufferedWriter Writer;
    protected static String form_name;
    protected static String lne;
    protected static String sku;    
    protected static String qty;
    protected static String sku_desc1;
    protected static String attr2;
    protected static String size2;
    protected static String org_sku;
    protected static String new_sku;
    protected static String sku_desc2;
    protected static String cust_satisf;
    protected static String orig_retail;
    protected static String reason;
    protected static String desc_damage;
    protected static String sCost;
    protected static String ln_date;
    protected static String fdcs;
    protected static String sskuvendor;
    protected static String sskuvpnum;
    protected static String sdcs;
    public ArrayList<String> formNameArray = new ArrayList<>();
    public ArrayList<String> lineArray = new ArrayList<>();
    public ArrayList<String> skuArray = new ArrayList<>();
    public ArrayList<String> qtyArray = new ArrayList<>();
    public ArrayList<String> skuDesc1Array = new ArrayList<>();
    public ArrayList<String> origRetailArray = new ArrayList<>();
    public ArrayList<String> reasonArray = new ArrayList<>();
    public ArrayList<String> descDamageArray = new ArrayList<>();
    public ArrayList<String> origSkuArray = new ArrayList<>();
    public ArrayList<String> newSkuArray = new ArrayList<>();
    public ArrayList<String> skuDesc2Array = new ArrayList<>();
    public ArrayList<String> attr2Array = new ArrayList<>();
    public ArrayList<String> size2Array = new ArrayList<>();
    public ArrayList<String> custSatisfArray = new ArrayList<>();
    public ArrayList<String> scostArray = new ArrayList<>();
    public ArrayList<String> lnDateArray = new ArrayList<>();
    public ArrayList<String> fdcsArray = new ArrayList<>();
    public ArrayList<String> sskuvendorArray = new ArrayList<>();
    public ArrayList<String> sskuvpnumArray = new ArrayList<>();
    public ArrayList<String> sdcsArray = new ArrayList<>();
    private static Component frame;
    
    /**
     * Creates new form Reports
     * @throws java.sql.SQLException
     */
    public Reports() throws SQLException {
        
        initComponents();
        conn=DBConnect.connection;
        GetReports();
        // resizes because autoresize was not ideal for spacing
        Table_Reports.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        Table_Reports.getColumnModel().getColumn(0).setPreferredWidth(210);
        Table_Reports.getColumnModel().getColumn(1).setPreferredWidth(40);
        Table_Reports.getColumnModel().getColumn(2).setPreferredWidth(60);
        Table_Reports.getColumnModel().getColumn(3).setPreferredWidth(30);
        Table_Reports.getColumnModel().getColumn(4).setPreferredWidth(170);
        Table_Reports.getColumnModel().getColumn(5).setPreferredWidth(60);
        Table_Reports.getColumnModel().getColumn(6).setPreferredWidth(60);
        Table_Reports.getColumnModel().getColumn(7).setPreferredWidth(80);
        Table_Reports.getColumnModel().getColumn(8).setPreferredWidth(60);
        Table_Reports.getColumnModel().getColumn(9).setPreferredWidth(50);
    }
    // get data from database table and insert into the table
private void GetReports() throws SQLException {
    try  {
    String sql = "SELECT * FROM unprocessed";
    pst = conn.prepareStatement(sql);
    rs = pst.executeQuery();
    Table_Reports.setModel(DbUtils.resultSetToTableModel(rs));
} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, e);
}
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Table_Reports = new javax.swing.JTable();
        CloseButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Save_To_Excel_Button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        Table_Reports.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        Table_Reports.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        Table_Reports.setAutoscrolls(false);
        jScrollPane1.setViewportView(Table_Reports);
        Table_Reports.getAccessibleContext().setAccessibleName("");

        CloseButton.setBackground(new java.awt.Color(255, 0, 0));
        CloseButton.setText("Close");
        CloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("All Stores Reports");

        Save_To_Excel_Button.setBackground(new java.awt.Color(0, 255, 0));
        Save_To_Excel_Button.setText("Save to Excel");
        Save_To_Excel_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_To_Excel_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Save_To_Excel_Button)
                        .addGap(65, 65, 65)
                        .addComponent(CloseButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 896, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(391, 391, 391)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CloseButton)
                    .addComponent(Save_To_Excel_Button))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void CloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseButtonActionPerformed
      this.dispose();
    }//GEN-LAST:event_CloseButtonActionPerformed

    private void Save_To_Excel_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_To_Excel_ButtonActionPerformed
        try {                                                   
            Statement s = DBConnect.connection.createStatement();
                    
            Calendar currentDate = Calendar.getInstance();
            SimpleDateFormat formatter = new SimpleDateFormat("MM_dd_yy_HH_mm_ss");
            String datenow = formatter.format(currentDate.getTime());
            
                    try {
                        /*
                        try {
                            String GetCompRange = "SELECT * FROM complete_range";
                            pst = conn.prepareStatement(GetCompRange);
                            pst.executeQuery();
                        } catch (SQLException ex) {
                            Logger.getLogger(All_Completed.class.getName()).log(Level.SEVERE, null, ex);
                        } */
                            fileWriter = new FileWriter("//sscfil03/groups/Inventory/Inventory Control/IAN/All Stores In Process Reports/Stores_InProcess_" + GtStore.store +"_"+ datenow + ".csv");
                            Writer = new BufferedWriter(fileWriter);
                          String header = "FORM NAME,LINE,SKU,QTY,DESCRIPTION1,ORIG SKU,DESCRIPTION2,ATTRIBUTE2,SIZE2,ORIG RETAIL,REASON,DESC DAMAGE,CUST SATISF,"
                                  + "LN DATE,NEW SKU,SECOND COST,SECOND SKU VENDOR,SECOND SKU VPNUM,FIRST DCS,SECOND DCS";
                          
                        Writer.write(header);
                        Writer.newLine();
                        
                        String getAllData = "SELECT Form_Name As frmNm, Line As lne, Sku As sku, Qty As qty, Description1 As skudesc1, Orig_Sku As orgSku, "
                        + "Description2 As skudesc2, Attribute2 As attr2, Size2 As size2, Orig_Retail As orgRetail, Reason As reasn, Desc_Damage As descDmge, "
                        + "Cust_Satisf As cstSatisf, Ln_Date As lnDte, New_Sku As newSku, Second_Cost As scst, "
                        + "Second_Sku_Vendor As secondSkuVendor, Second_Sku_VPNum As secondSkuVpnum, First_DCS As fDCS, Second_DCS As sDCS FROM unprocessed WHERE Sku IS NOT NULL";
                        s.execute(getAllData);
                    try (ResultSet rs1 = s.getResultSet()) {
                        while (rs1.next()) {
                        String frmnm = rs1.getString("frmNm");
                        String skuline = rs1.getString("lne");
                        String sk = rs1.getString("sku");
                        String qt = rs1.getString("qty");
                        String skdesc1 = rs1.getString("skudesc1");
                        String orgsk = rs1.getString("orgSku");
                        String skdsc2 = rs1.getString("skudesc2");
                        String atr2 = rs1.getString("attr2");
                        String sze2 = rs1.getString("size2");
                        String orgretail = rs1.getString("orgRetail");
                        String reasn = rs1.getString("reasn");
                        String descdamage = rs1.getString("descDmge");
                        String custsatisf = rs1.getString("cstSatisf");                        
                        String lndate = rs1.getString("lnDte");
                        String newsku = rs1.getString("newSku");
                        String scst = rs1.getString("scst");
                        String sskuvendr = rs1.getString("secondSkuVendor");
                        String sskuvpnm = rs1.getString("secondSkuVpnum");
                        String fDcs = rs1.getString("fDCS");
                        String sDcs = rs1.getString("sDCS");
                        form_name = frmnm;
                        lne = skuline;
                        sku = sk;
                        qty = qt;
                        sku_desc1 = skdesc1;
                        org_sku = orgsk;
                        sku_desc2 = skdsc2;
                        attr2 = atr2;
                        size2 = sze2;
                        orig_retail = orgretail;
                        reason = reasn;
                        desc_damage = descdamage;
                        cust_satisf = custsatisf;
                        ln_date = lndate;
                        new_sku = newsku;
                        sCost = scst;
                        sskuvendor = sskuvendr;
                        sskuvpnum = sskuvpnm;
                        fdcs = fDcs;
                        sdcs = sDcs;
                        formNameArray.add(form_name);
                        lineArray.add(lne);
                        skuArray.add(sku);
                        qtyArray.add(qty);
                        skuDesc1Array.add(sku_desc1);
                        origSkuArray.add(org_sku);
                        skuDesc2Array.add(sku_desc2);
                        attr2Array.add(attr2);
                        size2Array.add(size2);
                        origRetailArray.add(orig_retail);
                        reasonArray.add(reason);
                        descDamageArray.add(desc_damage);
                        custSatisfArray.add(cust_satisf);
                        lnDateArray.add(ln_date);
                        newSkuArray.add(new_sku);
                        scostArray.add(sCost);
                        sskuvendorArray.add(sskuvendor);
                        sskuvpnumArray.add(sskuvpnum);
                        fdcsArray.add(fdcs);
                        sdcsArray.add(sdcs);
                        }
                        
                for (int count = 0; count < skuArray.size(); count++ ) {
                String line = formNameArray.get(count) + "," + lineArray.get(count) + "," + skuArray.get(count) + "," + qtyArray.get(count) + "," +
                    skuDesc1Array.get(count)+ "," + origSkuArray.get(count) + "," + skuDesc2Array.get(count) + "," + attr2Array.get(count) + "," + size2Array.get(count) + "," + origRetailArray.get(count) + "," +
                    reasonArray.get(count) + "," + descDamageArray.get(count) + "," + custSatisfArray.get(count) + "," + lnDateArray.get(count) + "," + newSkuArray.get(count) + "," + scostArray.get(count) + "," +
                    sskuvendorArray.get(count) + "," + sskuvpnumArray.get(count) + "," + fdcsArray.get(count) + "," + sdcsArray.get(count) + "\t";
                    Writer.write(line);
                    Writer.newLine();
                }
                    Writer.close();
                } 
                    /* **** only way to update store field
                String setStrFmNm = "UPDATE unprocessed "
                   // + "SET Form_Name = '" + InvAdj_Admin.frmNm + "'" + ","
                    + "SET Store = '" + InvAdj_Admin.frmNm.split("_")[1] + "' "
                    + "WHERE Sku IS NOT NULL AND Form_Name = '"+ InvAdj_Admin.frmNm +"'"; 
                s1.execute(setStrFmNm);
                    */
                    } catch (IOException ex) {
                Logger.getLogger(Reports.class.getName()).log(Level.SEVERE, null, ex);
                
            }
        } catch (SQLException ex) {
            Logger.getLogger(Reports.class.getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(frame, "Export Created");
    }//GEN-LAST:event_Save_To_Excel_ButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new Reports().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Reports.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CloseButton;
    private javax.swing.JButton Save_To_Excel_Button;
    private javax.swing.JTable Table_Reports;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
