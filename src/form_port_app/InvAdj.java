/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package form_port_app;

import com.mysql.jdbc.Connection;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Seven_User & WStevens
 */

// this is the main page for creating new forms, accessing the admin panel of existing forms, and viewing reports
public class InvAdj extends javax.swing.JFrame {

    private Component frame;
    public static String frmNm;
    protected String frmNmI;
    protected String frmNmP;
    protected String frmNmA;
    private String dSku = null;
    private String dcs = null;
    public ArrayList<String> inPArray = new ArrayList<>();
    public ArrayList<String> inPStatusArray = new ArrayList<>();
    public ArrayList<String> pendArray = new ArrayList<>();
    public ArrayList<String> pendStatusArray = new ArrayList<>();
    public ArrayList<String> apprArray = new ArrayList<>();
    public ArrayList<String> apprStatusArray = new ArrayList<>();
    public ArrayList<String> dSkuArray = new ArrayList<>();
    public ArrayList<String> dcsArray = new ArrayList<>();
    Connection connect;
    public static FileWriter fWriter;
    public static BufferedWriter writer;
    /**
     * Creates new form InvAdj
     */
    public static DefaultListModel listModel2 = new DefaultListModel();

    public InvAdj() {
        initComponents();
       // admBtn.setVisible(false);
        String[] args = null;        
        if (DBConnect.TestEnviron == true) {
            Test_Label.setVisible(true);
        } else if (DBConnect.TestEnviron == false){
            Test_Label.setVisible(false);
        }
        Store_Number_Label.setText("(" + GtStore.store + ")");
        System.out.println("InvAdj Opened");
        listModel2.clear();
        GetForms_InvAdj.usrType = "usr";
        VersionLabel.setText("Version " + DBConnect.Version);
        // ** this is temporary until existing forms functionality can be fixed
        EBASBtn.setVisible(false);
        NEBASBtn.setVisible(false);
        ExistingFormsList.setVisible(false);
        jScrollPane2.setVisible(false);
        try {
            //InvAdj.listModel2.addElement("IAS");
            GetForms_InvAdj.ChkForm();
            System.out.println("Check Forms");
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(InvAdj.class.getName()).log(Level.SEVERE, null, ex);
        } 
        try {
            GtUsr();
            System.out.println("Get User");
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(InvAdj.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            GetForms.GtResCnt();
            System.out.println("Get Reasons");
        } catch (SQLException ex) {
            Logger.getLogger(InvAdj.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Close_Btn = new javax.swing.JButton();
        IASBtn = new javax.swing.JButton();
        NEBASBtn = new javax.swing.JButton();
        EBASBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ExistingFormsList = new javax.swing.JList(listModel2);
        admBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        UserTypeBox = new javax.swing.JComboBox();
        VersionLabel = new javax.swing.JLabel();
        PhysicalInventoryReportBtn = new javax.swing.JButton();
        CycleCountReportBtn = new javax.swing.JButton();
        Test_Label = new javax.swing.JLabel();
        StoreLabel = new javax.swing.JLabel();
        Store_Number_Label = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        Exit_Btn = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Inventory Adjustment Application Form Creation Page");
        setBounds(new java.awt.Rectangle(200, 20, 0, 0));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel1.setText("Inventory Adjustment System - User Panel");

        Close_Btn.setBackground(new java.awt.Color(255, 0, 0));
        Close_Btn.setText("Close to Main");
        Close_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Close_BtnActionPerformed(evt);
            }
        });

        IASBtn.setBackground(new java.awt.Color(255, 153, 0));
        IASBtn.setText("IAS");
        IASBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IASBtnActionPerformed(evt);
            }
        });

        NEBASBtn.setBackground(new java.awt.Color(204, 0, 204));
        NEBASBtn.setText("NEBAS");
        NEBASBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NEBASBtnActionPerformed(evt);
            }
        });

        EBASBtn.setBackground(new java.awt.Color(0, 153, 153));
        EBASBtn.setText("EBAS");
        EBASBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EBASBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Start New Form:");

        ExistingFormsList.setBorder(javax.swing.BorderFactory.createTitledBorder("Existing Forms"));
        ExistingFormsList.setModel(listModel2);
        ExistingFormsList.setAutoscrolls(false);
        ExistingFormsList.setEnabled(false);
        ExistingFormsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ExistingFormsListMouseClicked(evt);
            }
        });
        ExistingFormsList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ExistingFormsListKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(ExistingFormsList);

        admBtn.setBackground(new java.awt.Color(0, 0, 255));
        admBtn.setForeground(new java.awt.Color(255, 255, 255));
        admBtn.setText("Admin Panel");
        admBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                admBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("IAS: Inventory Adjustment");

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("YOU CAN ONLY CREATE NEW");

        jLabel7.setText("FORMS AND SUBMIT IN THE SAME");

        jLabel8.setText("SESSION. SAVING FORMS FOR LATER");

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cglogo3.jpg"))); // NOI18N

        UserTypeBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Store", "DL", "IC" }));

        VersionLabel.setText("Version 1.109");

        PhysicalInventoryReportBtn.setBackground(new java.awt.Color(255, 255, 0));
        PhysicalInventoryReportBtn.setText("Physical Inventory Report");
        PhysicalInventoryReportBtn.setVerifyInputWhenFocusTarget(false);
        PhysicalInventoryReportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PhysicalInventoryReportBtnActionPerformed(evt);
            }
        });

        CycleCountReportBtn.setBackground(new java.awt.Color(255, 255, 0));
        CycleCountReportBtn.setText("Cycle Count report");
        CycleCountReportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CycleCountReportBtnActionPerformed(evt);
            }
        });

        Test_Label.setFont(new java.awt.Font("Tahoma", 3, 15)); // NOI18N
        Test_Label.setText("(Test Environment)");

        StoreLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        StoreLabel.setText("Store #:");

        Store_Number_Label.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Store_Number_Label.setForeground(new java.awt.Color(0, 0, 204));
        Store_Number_Label.setText("52");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 0, 0));
        jLabel13.setText("** If you see skus you had just submitted ");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 0, 0));
        jLabel14.setText("in the print screeen after submitting ");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 0, 0));
        jLabel15.setText("a blank form, close and re-open IAN ** ");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 0, 0));
        jLabel16.setText("* If Reports are not working,");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 0, 0));
        jLabel17.setText("Close and re-open IAN *");

        Exit_Btn.setBackground(new java.awt.Color(255, 0, 0));
        Exit_Btn.setText("Exit IAN");
        Exit_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Exit_BtnActionPerformed(evt);
            }
        });

        jLabel9.setText("IS NOT AVAILABLE.");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 0, 0));
        jLabel10.setText("*** If you are having trouble printing,");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 0, 0));
        jLabel11.setText("Log out and re-open store desktop ***");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Test_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(37, 37, 37))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(UserTypeBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(admBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                .addComponent(NEBASBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(EBASBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(IASBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(StoreLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Store_Number_Label))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(VersionLabel)
                    .addComponent(CycleCountReportBtn)
                    .addComponent(PhysicalInventoryReportBtn)
                    .addComponent(jLabel17)
                    .addComponent(jLabel16)
                    .addComponent(jLabel14)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel15)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(Close_Btn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Exit_Btn))
                        .addComponent(jLabel13)))
                .addGap(56, 56, 56))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(StoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Store_Number_Label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(28, 28, 28)
                                .addComponent(jLabel2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Test_Label)
                                .addGap(6, 6, 6)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(VersionLabel))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel17)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel11)
                                .addGap(18, 18, 18)
                                .addComponent(PhysicalInventoryReportBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CycleCountReportBtn)
                                .addGap(45, 45, 45))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(EBASBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addGap(5, 5, 5)
                                .addComponent(IASBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(NEBASBtn)
                                .addGap(31, 31, 31)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9)
                                .addGap(17, 17, 17)
                                .addComponent(UserTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(admBtn))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Close_Btn)
                                    .addComponent(Exit_Btn))))
                        .addGap(87, 87, 87))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Close_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Close_BtnActionPerformed
        this.dispose();
        System.out.println("Close InvAdj");
    }//GEN-LAST:event_Close_BtnActionPerformed

    private void IASBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IASBtnActionPerformed
    if (UserTypeBox.getSelectedItem().toString().equals("Store")) {
        String[] args = null;
     //   IAS2.clearIfNew();
        IAS2.main(args);
        System.out.println("IAS Opened");
    } else {
        JOptionPane.showMessageDialog(frame, "You can only create a new form as a store\nClose and re-open the program");
    }
    }//GEN-LAST:event_IASBtnActionPerformed

    private void ExistingFormsListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ExistingFormsListKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String getValue = ExistingFormsList.getSelectedValuesList().toString();
            frmNm = getValue.substring(1, getValue.length() - 1);
            if (frmNm.startsWith("ias")) {
                String[] args = null;
                IAS2.main(args);
                System.out.println("IAS Opening");
            } else if (frmNm.startsWith("ebas")) {
                String[] args = null;
                EBAS.main(args);
                System.out.println("EBAS Opening");
            } else if (frmNm.startsWith("nebas")) {
                String[] args = null;
                NEBAS.main(args);
                System.out.println("NEBAS Opening");
            }
        }
    }//GEN-LAST:event_ExistingFormsListKeyPressed

    private void admBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_admBtnActionPerformed
        String[] args = null;
        if (UserTypeBox.getSelectedItem().toString().equals("Store")) {
            InvAdj_Admin.main(args);
            System.out.println("Admin Panel for Store Opening");
        }
        switch (UserTypeBox.getSelectedItem().toString()) {
            case "DL":
                try {
                    Password.main(args);
                    System.out.println("Password Prompt Opening");
                    // InvAdj_Admin.main(args);
                } catch (SQLException ex) {
                    Logger.getLogger(InvAdj.class.getName()).log(Level.SEVERE, null, ex);
                }                
                break;
            case "IC":
                try {
                    Password.main(args);
                    System.out.println("Password Prompt Opening");
                    // InvAdj_Admin.main(args);
                } catch (SQLException ex) {
                    Logger.getLogger(InvAdj.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
        }
    }//GEN-LAST:event_admBtnActionPerformed

    private void ExistingFormsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExistingFormsListMouseClicked
        if (evt.getClickCount() == 2) {
            String getValue = ExistingFormsList.getSelectedValuesList().toString();
            frmNm = getValue.substring(1, getValue.length() - 1);
            if (frmNm.startsWith("ias")) {
                String[] args = null;
                IAS2.main(args);
                System.out.println("IAS Opening");
            } else if (frmNm.startsWith("ebas")) {
                String[] args = null;
                EBAS.main(args);
                System.out.println("EBAS Opening");
            } else if (frmNm.startsWith("nebas")) {
                String[] args = null;
                NEBAS.main(args);
                System.out.println("NEBAS Opening");
            }
        }
    }//GEN-LAST:event_ExistingFormsListMouseClicked

    private void NEBASBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NEBASBtnActionPerformed
    if (UserTypeBox.getSelectedItem().toString().equals("Store")) {
        String[] args = null;
        NEBAS.main(args);
        System.out.println("NEBAS Opening");
    } else {
        JOptionPane.showMessageDialog(frame, "You can only create a new form as a store\nClose and re-open the program");
    }        
    }//GEN-LAST:event_NEBASBtnActionPerformed

    private void EBASBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EBASBtnActionPerformed
    if (UserTypeBox.getSelectedItem().toString().equals("Store")) {
        String[] args = null;
        EBAS.main(args);
        System.out.println("EBAS Opening");
    } else {
        JOptionPane.showMessageDialog(frame, "You can only create a new form as a store\nClose and re-open the program");
    }
    }//GEN-LAST:event_EBASBtnActionPerformed

    // report for store to view in JTable with the ability to print
    private void PhysicalInventoryReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PhysicalInventoryReportBtnActionPerformed
       String[] args = null;
       
       try {
           Statement s = DBConnect.connection.createStatement();
           
           String DeletePrevRecords = "DELETE FROM storeunprocessed";
           s.execute(DeletePrevRecords);
           
           // pulls all form names and puts into array list
           String selfrmistatus = "SELECT Form_Name As frmnme FROM existing_forms WHERE Status = 'In-Process' AND Store = '" + GtStore.store + "'";
           s.execute(selfrmistatus);
           try (ResultSet rs02 = s.getResultSet()) {
               while (rs02.next()) {
                   String frmnm = rs02.getString("frmnme");
                   frmNmI = frmnm;
                   inPArray.add(frmNmI);
                //   inPStatusArray.add("In-Process");
               }
               // uses form name strings to insert each line of data one at a time into unprocessed table
               for (int count = 0; count < inPArray.size(); count++ ) {
                   String insrtInproNebas = "INSERT IGNORE INTO storeunprocessed (SELECT Form_Name, Line, Sku, Qty, Description1, Description2, Attribute2, Size2 FROM "+ inPArray.get(count) //+ "')";
                           + " WHERE Sku IS NOT NULL AND Form_Name LIKE 'nebas%')"; // AND Form_Name = '" +inPArray.get(count)+ "')";
                   s.execute(insrtInproNebas);
                 
                   String insrtInproEbas = "INSERT IGNORE INTO storeunprocessed (SELECT Form_Name, Line, Sku, Qty, Description1, Description2, Attribute2, Size2 FROM "+ inPArray.get(count) //+ "')";
                           + " WHERE Sku IS NOT NULL AND Form_Name LIKE 'ebas%')"; // AND Form_Name = '" +inPArray.get(count)+ "')";
                   s.execute(insrtInproEbas);
                    // String insrtInproStatus = "INSERT IGNORE INTO storeunprocessed (SELECT Status FROM existing_forms WHERE Form_Name = '" +inPArray.get(count)+ "')";
                 //  s.execute(insrtInproStatus);
               }
           }
           
           // pulls all form names and puts into array list
           String selfrmpstatus = "SELECT Form_Name As frmnme FROM existing_forms WHERE Status = 'Pending' AND Store = '" + GtStore.store + "'";
           s.execute(selfrmpstatus);
           try (ResultSet rs02 = s.getResultSet()) {
               while (rs02.next()) {
                   String frmnm = rs02.getString("frmnme");
                   frmNmP = frmnm;
                   pendArray.add(frmNmP);
                 //  pendStatusArray.add("Pending");
               }
               // uses form name strings to insert each line of data one at a time into unprocessed table
               for (int count = 0; count < pendArray.size(); count++ ) {
                   String insrtPendNebas = "INSERT IGNORE INTO storeunprocessed (SELECT Form_Name, Line, Sku, Qty, Description1, Description2, Attribute2, Size2 FROM "+ pendArray.get(count) // + "')";
                           + " WHERE Sku IS NOT NULL AND Form_Name LIKE 'nebas%')"; //AND Form_Name = '" +pendArray.get(count)+ "')";
                   s.execute(insrtPendNebas);
                   String insrtPendEbas = "INSERT IGNORE INTO storeunprocessed (SELECT Form_Name, Line, Sku, Qty, Description1, Description2, Attribute2, Size2 FROM "+ pendArray.get(count) // + "')";
                           + " WHERE Sku IS NOT NULL AND Form_Name LIKE 'ebas%')"; //AND Form_Name = '" +pendArray.get(count)+ "')";
                   s.execute(insrtPendEbas);
                 //  String insrtPendStatus = "INSERT IGNORE INTO storeunprocessed (SELECT Status FROM existing_forms WHERE Form_Name = '" +pendArray.get(count)+ "')";
                 //  s.execute(insrtPendStatus);
               }
           }
           
           // pulls all form names and puts into array list
           String selfrmastatus = "SELECT Form_Name As frmnme FROM existing_forms WHERE Status = 'Approved' AND Store = '" + GtStore.store + "'";
           s.execute(selfrmastatus);
           try (ResultSet rs02 = s.getResultSet()) {
               while (rs02.next()) {
                   String frmnm = rs02.getString("frmnme");
                   frmNmA = frmnm;
                   apprArray.add(frmNmA);
                //   apprStatusArray.add("Approved");
               }
               // uses form name strings to insert each line of data one at a time into unprocessed table
               for (int count = 0; count < apprArray.size(); count++ ) {
                   String insrtApprNebas = "INSERT IGNORE INTO storeunprocessed (SELECT Form_Name, Line, Sku, Qty, Description1, Description2, Attribute2, Size2 FROM "+ apprArray.get(count) //+ "')";
                           + " WHERE Sku IS NOT NULL AND Form_Name LIKE 'nebas%')"; // Form_Name = '" +apprArray.get(count)+ "')";
                   s.execute(insrtApprNebas);
                   
                   String insrtApprEbas = "INSERT IGNORE INTO storeunprocessed (SELECT Form_Name, Line, Sku, Qty, Description1, Description2, Attribute2, Size2 FROM "+ apprArray.get(count) //+ "')";
                           + " WHERE Sku IS NOT NULL AND Form_Name LIKE 'ebas%')"; // Form_Name = '" +apprArray.get(count)+ "')";
                   s.execute(insrtApprEbas);
                 //  String insrtApprStatus = /* "INSERT IGNORE INTO*/ "UPDATE storeunprocessed (SELECT Status FROM existing_forms WHERE Form_Name = '" +apprArray.get(count)+ "')";
                 //  s.execute(insrtApprStatus);
               }
           }
           
       }       catch (SQLException ex) {
           Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
       }
       // JOptionPane.showMessageDialog(frame, "Getting Reports");
        StoreReports.main(args);
        System.out.println("Opening Store Report");
    }//GEN-LAST:event_PhysicalInventoryReportBtnActionPerformed

    // for IC use to view all stores data that has not been completed (anything not ready for export)
    // Viewable in JTable and can print to local printer
    // this is password protected to prevent unauthorized access
    /* Not currently in use because its confusing for stores to be able to view these buttons because they cannot use them
       These buttons have been moved to Admin panel */
    private void CycleCountReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CycleCountReportBtnActionPerformed
     String[] args = null;
       // try {
               //   Password.main(args);
               // } catch (SQLException ex) {
               //   Logger.getLogger(InvAdj.class.getName()).log(Level.SEVERE, null, ex);
               // }
        try {                                        
                 Statement s = DBConnect.connection.createStatement();
                 
                 String DeletePrevRecords = "DELETE FROM cyclecountreport";
                 s.execute(DeletePrevRecords);
                 
                 // pulls all form names and puts into array list
                 String selfrmistatus = "SELECT Form_Name As frmnme FROM existing_forms WHERE Status = 'In-Process' AND Store = '" + GtStore.store + "' AND Form_Name LIKE 'ias%'";
                 s.execute(selfrmistatus);
                 try (ResultSet rs02 = s.getResultSet()) {
                     while (rs02.next()) {
                         String frmnm = rs02.getString("frmnme");
                         frmNmI = frmnm;
                         inPArray.add(frmNmI);
                    }
                     
                     // uses form name strings to insert each line of data one at a time into unprocessed table
                     for (int count = 0; count < inPArray.size(); count++ ) {
                     String insrtInpro = "INSERT IGNORE INTO cyclecountreport (SELECT Form_Name, Line, Sku, Qty, First_DCS, Description1, New_Sku, Qty_In, Second_DCS, Description2 FROM " + inPArray.get(count)
                       + " WHERE Form_Name LIKE 'ias%' AND Sku IS NOT NULL)";
                    s.execute(insrtInpro);
                    
                    /*
                  //  for (int count = 0; count < inPArray.size(); count++ ) {
                        String getDcs = "SELECT Sku As sku FROM cyclecountreport";
                        s.execute(getDcs);
                        ResultSet rs3 = s.getResultSet();
                            while (rs3.next()) {
                            String Sku = rs3.getString("sku");
                            dSku = Sku;
                            dSkuArray.add(dSku);
                            }
                    }
                    
                    for (int count = 0; count < dSkuArray.size(); count++ ) {
                        String getDcs = "SELECT DCS As dcs FROM item_master WHERE Item = '"+ dSkuArray.get(count) +"'";
                        s.execute(getDcs);
                        ResultSet rs4 = s.getResultSet();
                            while (rs4.next()) {
                            String Dcs = rs4.getString("dcs");
                            dcs = Dcs;
                            dcsArray.add(dcs);
                        }
                    }
                     
                    for (int count = 0; count < dcsArray.size(); count++ ) {
                        String insertDcs = "UPDATE cyclecountreport SET DCSsku1 = '"+ dcsArray.get(count) +"'";
                        s.execute(insertDcs); */
                    } 
                 } 
                 
                 // pulls all form names and puts into array list
                  String selfrmpstatus = "SELECT Form_Name As frmnme FROM existing_forms WHERE Status = 'Pending' AND Store = '" + GtStore.store + "' AND Form_Name LIKE 'ias%'";
                 s.execute(selfrmpstatus);
                 try (ResultSet rs02 = s.getResultSet()) {
                     while (rs02.next()) {
                         String frmnm = rs02.getString("frmnme");
                         frmNmP = frmnm;
                         pendArray.add(frmNmP);
                     }
                     // uses form name strings to insert each line of data one at a time into unprocessed table
                     for (int count = 0; count < pendArray.size(); count++ ) {
                     String insrtPend = "INSERT IGNORE INTO cyclecountreport (SELECT Form_Name, Line, Sku, Qty, First_DCS, Description1, New_Sku, Qty_In, Second_DCS, Description2 FROM "+ pendArray.get(count)
                       + " WHERE " /*Sku != '0' AND */ + "Form_Name LIKE 'ias%' AND Sku IS NOT NULL)";
                    s.execute(insrtPend);
                    }
                 }
                 
                  // pulls all form names and puts into array list
                  String selfrmastatus = "SELECT Form_Name As frmnme FROM existing_forms WHERE Status = 'Approved' AND Store = '" + GtStore.store + "' AND Form_Name LIKE 'ias%'";
                 s.execute(selfrmastatus);
                 try (ResultSet rs02 = s.getResultSet()) {
                     while (rs02.next()) {
                         String frmnm = rs02.getString("frmnme");
                         frmNmA = frmnm;
                        apprArray.add(frmNmA);
                    }
                     // uses form name strings to insert each line of data one at a time into unprocessed table
                     for (int count = 0; count < apprArray.size(); count++ ) {
                     String insrtAppr = "INSERT IGNORE INTO cyclecountreport (SELECT Form_Name, Line, Sku, Qty, First_DCS, Description1, New_Sku, Qty_In, Second_DCS, Description2 FROM "+ apprArray.get(count)
                       + " WHERE " /*Sku != '0' AND */ + "Form_Name LIKE 'ias%' AND Sku IS NOT NULL)";
                    s.execute(insrtAppr);
                    }  
                 }
              
                  CycleCountReport.main(args);
                  System.out.println("Opening Reports");
             }       catch (SQLException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
          // ReportsPW.main(args);
          
    }//GEN-LAST:event_CycleCountReportBtnActionPerformed

    private void Exit_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Exit_BtnActionPerformed
        GetForms.FrmExt();
    }//GEN-LAST:event_Exit_BtnActionPerformed


    // not in use
   /* protected void CreateAllReportFile() throws IOException, SQLException {
        
        Calendar currentDate = Calendar.getInstance();
        SimpleDateFormat formatter = new SimpleDateFormat("MM_dd_yy_HH_mm_ss");
        String datenow = formatter.format(currentDate.getTime());
        
                // this file path is for testing only // send data to printer and should not create a file
                fWriter = new FileWriter("C:/Users/102/Desktop/All_Stores_In_Process_Report_" + datenow + "_.txt", false);
                writer = new BufferedWriter(fWriter);
                String header = "Form_Name,Sku,Qty,Description,Attribute,Size,Line";
                writer.write(header);
                writer.newLine();
                
                Statement s1 = DBConnect.connection.createStatement();
                String GetUnpro = "SELECT Form_Name As frmNm, Sku As s, Qty As q, Description2 As desc2, "
                        + "Attribute2 As attr2, Size2 As size2, Line As line FROM unprocessed";
                s1.execute(GetUnpro);
                
                try (ResultSet rs01 = s1.getResultSet()) {             
                while (rs01.next()) {
                    String FrmNm = rs01.getString("frmNm");
                    String sku = rs01.getString("s");
                    String qty = rs01.getString("q");
                    String desc2 = rs01.getString("desc2");
                    String attr2 = rs01.getString("attr2");
                    String size2 = rs01.getString("size2");
                    String Line = rs01.getString("line");
                    String line = FrmNm+","+sku+","+qty+","+desc2+","+attr2+","+size2+","+Line+"\n";
                    writer.write(line);
                    writer.newLine();
                }
            }      
                writer.close(); 
    } */
            
    
    //not in use //found better solution
    /*
    protected void CreateStoreReportFile () throws IOException, SQLException {
        
        Calendar currentDate = Calendar.getInstance();
        SimpleDateFormat formatter = new SimpleDateFormat("MM_dd_yy_HH_mm_ss");
        String datenow = formatter.format(currentDate.getTime());
        
                // this file path is for testing only // send data to printer and should not create a file
                fWriter = new FileWriter("C:/Users/102/Desktop/Store_In_Process_Report_" + datenow + "_.txt", false);
                writer = new BufferedWriter(fWriter);
                String header = "Form_Name,Sku,Qty,Description,Attribute,Size,Line";
                writer.write(header);
                writer.newLine();
                
                Statement s1 = DBConnect.connection.createStatement();
                String GetUnpro = "SELECT Form_Name As frmNm, Sku As s, Qty As q, Description2 As desc2, "
                        + "Attribute2 As attr2, Size2 As size2, Line As line FROM unprocessed";
                s1.execute(GetUnpro);
                
                try (ResultSet rs01 = s1.getResultSet()) {             
                while (rs01.next()) {
                    String FrmNm = rs01.getString("frmNm");
                    String sku = rs01.getString("s");
                    String qty = rs01.getString("q");
                    String desc2 = rs01.getString("desc2");
                    String attr2 = rs01.getString("attr2");
                    String size2 = rs01.getString("size2");
                    String Line = rs01.getString("line");
                    String line = FrmNm+","+sku+","+qty+","+desc2+","+attr2+","+size2+","+Line+"\n";
                    writer.write(line);
                    writer.newLine();
                }
            }      
                writer.close();     
    } */
      
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InvAdj.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new InvAdj().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Close_Btn;
    private javax.swing.JButton CycleCountReportBtn;
    private javax.swing.JButton EBASBtn;
    public static javax.swing.JList ExistingFormsList;
    private javax.swing.JButton Exit_Btn;
    private javax.swing.JButton IASBtn;
    private javax.swing.JButton NEBASBtn;
    private javax.swing.JButton PhysicalInventoryReportBtn;
    private javax.swing.JLabel StoreLabel;
    private javax.swing.JLabel Store_Number_Label;
    private javax.swing.JLabel Test_Label;
    public static javax.swing.JComboBox UserTypeBox;
    private javax.swing.JLabel VersionLabel;
    public static javax.swing.JButton admBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    // Get User Type for Admin Button
    public static void GtUsr() throws ClassNotFoundException, SQLException {
        GtStore.GtStore();
        try (Statement s = DBConnect.connection.createStatement()) {
            String selTable1 = "SELECT DL As nm FROM dl WHERE DL = '" + GtStore.store.toLowerCase() + "'";
            s.execute(selTable1);
            try (ResultSet rs1 = s.getResultSet()) {
                if (rs1.next()) {
                    admBtn.setVisible(true);
                    admBtn.setEnabled(true);
                }
            }
            
            String selTable2 = "SELECT IC As nm FROM ic WHERE IC = '" + GtStore.store.toLowerCase() + "'";
            s.execute(selTable2);
            try (ResultSet rs2 = s.getResultSet()) {
                if (rs2.next()) {
                    admBtn.setVisible(true);
                    admBtn.setEnabled(true);
                }
            }
        }
    }

    public static void Rpnt() {
        InvAdj.listModel2.clear();
       // try {
       //     GetForms_InvAdj.ChkForm();
       // } catch (ClassNotFoundException | SQLException ex) {
       //     Logger.getLogger(InvAdj.class.getName()).log(Level.SEVERE, null, ex);
       // }
    }
}
